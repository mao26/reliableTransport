package TetrisOwn;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

import Tetris.Shape.Tetrominoes;
import TetrisOwn.Shape.Tetrinomes;;

public class Board extends JPanel implements ActionListener{

    final int BoardWidth = 10;
    final int BoardHeight = 22;

    Timer timer;
    boolean isFallingFinished = false;
    boolean isStarted = false;
    boolean isPaused = false;
    int numLinesRemoved = 0;
    int curX = 0;
    int curY = 0;
    JLabel statusbar;
    Shape curPiece;
    Tetrinomes[] board;
    
    public Board(Tetris parent){
    	statusbar = parent.getStatusBar();
    	board = new Tetrinomes[BoardWidth * BoardHeight];
    	timer = new Timer(400, this);
    	curPiece = new Shape();
    	setFocusable(true);
    	clearBoard();
    	addKeyListener(new TAdapter());
    }
    
    public void start(){
    	if(isPaused) return;
    	isFallingFinished = false;
    	numLinesRemoved = 0;
    	isStarted = true;
    	timer.start();
    	clearBoard();
    	newPiece();
    }
    
    private void newPiece() {
    	curPiece.setRandomShape();
    	curX = BoardWidth / 2 - 1;
    	curY = BoardHeight - 1;
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Dimension size = getSize();
		int boardTop = (int) size.getHeight() - BoardHeight * squareHeight();
		for(int i = 0; i < BoardHeight; ++i){
			for(int j = 0; j < BoardWidth; ++ j){
				
			}
		}
		if(curPiece.getShape() != Tetrinomes.NoShape){
			for(int i = 0; i < 4; i++){
				int x = curX + curPiece.x(i);
				int y = curY + curPiece.y(i);
				drawSquare(g, x, y, curPiece.getShape());
			}
		}
	}
	
    int squareWidth() { return (int) getSize().getWidth() / BoardWidth; }
    int squareHeight() { return (int) getSize().getHeight() / BoardHeight; }
	
	private void drawSquare(Graphics g, int x, int y, Tetrinomes shape) {
        Color colors[] = { new Color(0, 0, 0), new Color(204, 102, 102), 
                new Color(102, 204, 102), new Color(102, 102, 204), 
                new Color(204, 204, 102), new Color(204, 102, 204), 
                new Color(102, 204, 204), new Color(218, 170, 0)
            };


            Color color = colors[shape.ordinal()];

            g.setColor(color);
            g.fillRect(x + 1, y + 1, squareWidth() - 2, squareHeight() - 2);

	}

	private class TAdapter extends KeyAdapter{

		@Override
		public void keyPressed(KeyEvent e) {
			// TODO Auto-generated method stub
			super.keyPressed(e);
		}
    	
    }
    
	private void clearBoard() {
		for(int i = 0; i < BoardWidth * BoardHeight; i++){
			board[i] = Tetrinomes.NoShape;
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(isFallingFinished){
			isFallingFinished = false;
			newPiece();
		} else {
			oneLineDown();
		}
	}
	
	private boolean tryMove(Shape newPiece, int x, int y){
    	for(int i = 0; i < 4; i++){
    		int x = newX + newPiece.x(i);
    		int y = newY + newPiece.y(i);
    		if(x < 0 || x >= BoardWidth || y < 0 || y >= BoardHeight){
    			return false;
    		}
    		if(shapeAt(x,y) != Tetrominoes.NoShape){
    			return false;
    		}
    	}
	}

	private void oneLineDown() {
		if(!tryMove()) return; //drop our piece  
	}
	
}
