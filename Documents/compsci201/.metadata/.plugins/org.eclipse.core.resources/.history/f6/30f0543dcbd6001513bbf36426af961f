package cellsociety_team13;
/**
 * This class is the slime mold simulation. It is a subclass of the Rules class and depends heavily on the grid class and the cell class and on its own
 * cell subclass, slime cell, and the slime cell comparators.
 */
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.ResourceBundle;
import gridNCell.Grid;

public class SlimeTest extends Rules {
	private static final int EMPTY = 0;
	private static final int TURTLE = 1;
	private int[] states = { EMPTY, TURTLE };
	private static final String[] paramNames = { "Wiggle Bias", "Wiggle Angle", "Sniff Threshold", "Sniff Angle",
			"Camp Decay", "Camp Add", "Camp Diffuse" };
	private ResourceBundle def = ResourceBundle.getBundle("resources/default");
	private ArrayList<Double> params;
	private ArrayList<SlimeCell> toMove;
	private static final boolean diag = true;
	private double snThresh, wAngle, sAngle, campDec, campAdd, campDiff;

	public SlimeTest(List<Double> params, Grid grid) {
		super(grid, params);
		this.snThresh = setParams(2);
		this.wAngle = setParams(1);
		this.sAngle = setParams(3);
		this.campDec  =setParams(4);
		this.campAdd =setParams(5);
		this.campDiff = setParams(6);
	}
	
	
	private double setParams(int index){
	    if(params.size()<index +1 || params.get(index)<0){
	        return Double.parseDouble(def.getString("slimeDef"));
	    }else{
	        return params.get(index);
	    }
	}

	/**
         * returns states
         * @return int[] of states
         */
	@Override
	public int[] getStates() {
		return states;
	}

	 /**
         * gets paramenter names
         * @return string array of param names
         */
	@Override
	public String[] getParamNames() {
		return paramNames;
	}

	/**
         * updates the simulations parameters
         * @param name name of parameter to change
         * @param toSet double value of new parameter
         */
	@Override
	public void setParam(String name, Double toSet) {
	        int index=0;
		if (name.equals(paramNames[0]) && toSet >= 0 && toSet <= 1) {
			cellParams(toSet, name);
			index =0;
		} else if (name.equals(paramNames[1]) && toSet >= 0 && toSet <= 180) {
			this.wAngle = toSet;
			index =1;
		} else if (name.equals(paramNames[2]) && toSet >= 0) {
			this.snThresh = toSet;
			cellParams(toSet, name);
			index = 2;
		} else if (name.equals(paramNames[3]) && toSet >= 0 && toSet <= 360) {
			this.wAngle = toSet;
			index =3;
		} else if (name.equals(paramNames[4]) && toSet >= 0 && toSet <= 1) {
			this.campDec = toSet;
			index =4;
		} else if (name.equals(paramNames[5]) && toSet >= 0) {
			this.campAdd = toSet;
			index =5;
		} else if (name.equals(paramNames[6]) && toSet >= 0 && toSet <= 1) {
			this.campDiff = toSet;
			index=6;
		}
		params.set(index, toSet);

	}
	
	/**
	 * if simulation parameter needs to be set in every cell, iterates through cell grid and sets parameter
	 * in every cell
	 * @param toSet new value of parameter
	 * @param name name of parameter to set
	 */
	private void cellParams(Double toSet, String name) {
		SlimeCell sCell = null;
		for (int row = 0; row < super.getGrid().getSize(); row++) {
			for (int col = 0; col < super.getGrid().getSize(); col++) {
				sCell = (SlimeCell) super.getGrid().getCell(row, col);
				if (name.equals(paramNames[1])) {
					sCell.setWBias(toSet);
				} else if (name.equals(paramNames[2])) {
					sCell.setSThresh(toSet);
				}
			}
		}

	}

	/**
	 * gets list of parameters for simulation
	 * @return List of doubles of current params
	 */
	@Override
	public List<Double> getParameters() {
		return params;
	}
	
	/**
	 * sets next states of every cell in the cell grid
	 * @param grid current cell grid
	 */
	@Override
	public void setNextStates(Grid grid) {
		toMove = new ArrayList<SlimeCell>();
		super.setNextStates(grid);
		moveTurtles();

	}

	/**
	 * moves any turtles in a random order, so that no turtle has priority over moving
	 * to a certain space based on its current location. 
	 */
	private void moveTurtles() {
		Random rand = new Random();
		int index;
		while (toMove.size() > 0) {
			index = rand.nextInt(toMove.size());
			if (!moveToCamp(toMove.get(index))) {
				if (!moveRandomly(toMove.get(index))) {
					toMove.get(index).setNextState(TURTLE);
				}
			}
			toMove.remove(index);
		}

	}
	/**
	 * Moves turtle to random open neighbor cell bases slightly on wiggle bias
	 * @param slimeCell cell to move
	 * @return boolean whether cell moved
	 */
	private boolean moveRandomly(SlimeCell slimeCell) {
		boolean moved = false;
		ArrayList<SlimeCell> neighbors = (ArrayList<SlimeCell>) slimeCell.getAngledNeighbors(diag, super.getGrid(), wAngle);
		neighbors.sort(new SlimeComparatorWiggle(slimeCell.getXCoor()));
		for (SlimeCell cell : neighbors) {
			if (cell.getNextState() != TURTLE && cell.getCurrState() != TURTLE) {
				cell.setNextState(TURTLE);
				slimeCell.setNextState(EMPTY);
				moved = true;
				break;
			}

		}
		return moved;
	}
	/**
	 * moves turtle to open neighbor cell with highest camp level if camp level over threshold
	 * @param slimeCell cell to move
	 * @return boolean whether cell moved
	 */
	private boolean moveToCamp(SlimeCell slimeCell) {
		boolean moved = false;
		ArrayList<SlimeCell> neighbors = (ArrayList<SlimeCell>) slimeCell.getAngledNeighbors(diag, super.getGrid(), sAngle);
		neighbors.sort(new SlimeComparatorCamp());
		for (SlimeCell cell : neighbors) {
			if (cell.getNextState() != TURTLE && cell.getCurrState() != TURTLE && cell.getCamp() >= snThresh) {
				cell.setNextState(TURTLE);
				slimeCell.setNextState(0);
				moved = true;
				break;
			}
		}
		return moved;
	}
	/**
	 * implements rule for simulation on every cell in the cell grid
	 * @param cell cell to implement rule upon
	 */
	@Override
	protected void implementRule(Cell cell) {
		SlimeCell slime = (SlimeCell) cell;
		if (slime.getCurrState() == EMPTY) {
			slime.setNextState(EMPTY);

		}
		if (slime.getCurrState() == TURTLE) {
			slime.addCamp(campAdd);
			toMove.add(slime);
		}
		diffCamp(slime);
		slime.decayCamp(campDec);

	}
	/**
	 * Diffuses some of cells camp amount into its neighboring cells, and decreases cells
	 * camp amount by requiste amount
	 * @param slime cell to diffuse camp amount from
	 */
	private void diffCamp(SlimeCell slime) {
		SlimeCell neigh = null;
		double campAm = slime.getCamp();
		ArrayList<Cell> neighbors = (ArrayList<Cell>) slime.getNeighbors(true, super.getGrid());
		for (Cell c : neighbors) {
			neigh = (SlimeCell) c;
			neigh.addCamp(campAm * campDiff / neighbors.size());
		}
	}

}
