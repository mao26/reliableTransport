/*
 * This entire file is part of my masterpiece.
 * Mario Oliver
 * 
 * We extended the way our Rules class worked, so that certain methods no longer must be overwritten when we extend our
 * rules class. The two most common that are used by almost every simulation case that extends the rules class are getGrid()
 * - which is used by every class - and the getParams(). Both were already being initialized by almost every constructor
 * of classes that extended rules, so no instead they are passed to the constructor of the super class that initializes
 * and keeps track of our grid and params variables. So now every call to one of these two variables comes through a super.getter()
 * - so super.getGrid() for example - call where our data is held. This makes it so that every class no longer needs to 
 * create its own getGrid() method and reduces our code duplication. An example can be seen in LangtonsLoop
 * 
 * 
 */
package cellsociety_team13;

/**
 * abstract class for simulation rules. All simulation rules are extensions of this class
 */
import java.util.List;
import gridNCell.Grid;

public abstract class Rules {

	private Grid grid;
	private List<Double> params;

	public Rules(Grid grid, List<Double> params) {
		this.grid = grid;
		this.params = params;
	}

	/**
	 * return all possible states for simulation
	 * 
	 * @return int[] of states
	 */
	public abstract int[] getStates();

	/**
	 * return cell grid @return grid for current simulation
	 */
	public Grid getGrid() {
		return grid;
	}

	/**
	 * return parameter names
	 * 
	 * @return String[] of parameter names
	 */
	public abstract String[] getParamNames();

	/**
	 * set a parameters values
	 * 
	 * @param name
	 *            name of parameter to set
	 * @param toSet
	 *            new parameter value
	 */
	public abstract void setParam(String name, Double toSet);

	/**
	 * iterate through grid and use simulations rule on each cell
	 */
	public void setNextStates(Grid grid) {
		for (int r = 0; r < grid.getSize(); r++) {
			for (int c = 0; c < grid.getSize(); c++) {

				implementRule(grid.getCell(r, c));
			}
		}
	}

	/**
	 * implement the simulations rule on each cell
	 * 
	 * @param cell
	 *            cell to implement rule upon
	 */
	protected abstract void implementRule(Cell cell);

	/**
	 * returns all parameters for simulation @return List of Doubles of all
	 * parameters
	 */
	public List<Double> getParameters() {
		return params;
	}

}
